{"version":3,"sources":["components/Cell.js","components/Board.js","difficultyConfig.js","components/Game.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_eventClick","bind","assertThisInitialized","_eventRightClick","e","preventDefault","eventClick","x","y","eventRightClick","content","flagged","react_default","a","createElement","className","aria-hidden","style","baseStyle","bombCount","assign","color","baseFlagStyle","class","open","openStyle","bomb","width","height","border","falseFlagStyle","onClick","onContextMenu","React","Component","Board","rows","boardHeight","columns","boardWidth","push","Cell_Cell","key","board","renderCells","difficultyConfig","easy","bombNum","hard","Game","difficulty","state","_initBoard","gameOver","victory","flagCount","timerTime","timerOn","cellClicked","cellRightClicked","gameTimer","setInterval","setState","bombPlaces","_initBombs","_difficultyConfig$dif","Array","from","fill","console","log","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","_difficultyConfig$dif2","length","Math","floor","random","duplicate","_i","_bombPlaces","target","textContent","toLowerCase","openCell","toggleFlag","concat","_difficultyConfig$thi","revealBombs","i","j","_isClear","count","_difficultyConfig$thi2","_this2","_difficultyConfig$thi3","_boardWidth","bombsRemaining","seconds","slice","minutes","gameEndText","id","chgDifficulty","Board_Board","ReactDOM","render","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.06bd60cc.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles/Cell.css'\r\n\r\n// component to render a singular cell\r\n\r\nexport default class Cell extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis._eventClick = this._eventClick.bind(this)\r\n\t\tthis._eventRightClick = this._eventRightClick.bind(this)\r\n\t}\r\n\r\n\t_eventClick(e) {\r\n\t\te.preventDefault()\r\n\t\tthis.props.eventClick(this.props.x, this.props.y);\r\n\t}\r\n\r\n\t_eventRightClick(e) {\r\n\t\te.preventDefault()\r\n\t\tthis.props.eventRightClick(this.props.x, this.props.y)\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet content = this.props.flagged ? <i className=\"fa fa-flag-o\" aria-hidden=\"true\"></i> : ''\r\n\t\tlet style = baseStyle;\r\n\t\tif (this.props.bombCount > 0) {\r\n\t\t\tcontent = this.props.bombCount\r\n\t\t\tswitch (content) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tstyle = Object.assign({}, style, {color: 'pink' })\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tstyle = Object.assign({}, style, {color: 'blue' })\r\n\t\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.props.flagged) {\r\n\t\t\tstyle = baseFlagStyle\r\n\t\t\tcontent = <i class=\"fa fa-flag\" aria-hidden=\"true\"></i>\r\n\t\t}\r\n\r\n\t\tif (this.props.open) {\r\n\t\t\tstyle = openStyle;\r\n\t\t\tif (this.props.bomb) { \r\n\t\t\t\tstyle = Object.assign({}, style, {width:40, height:40, border: 'dashed 1px #a11515'})\r\n\t\t\t\tcontent = <i className=\"fa fa-bomb\" aria-hidden=\"true\"></i>\r\n\t\t\t}\r\n\t\t\tif (this.props.flagged && !this.props.bomb) { // flagged a clear cell\r\n\t\t\t\tstyle = falseFlagStyle\r\n\t\t\t\tcontent = <i className=\"fa fa-flag-o\" aria-hidden=\"true\"></i>\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div \r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName=\"cell\"\r\n\t\t\t\tonClick={this._eventClick}\r\n\t\t\t\tonContextMenu={this._eventRightClick}\r\n\t\t\t> \r\n\t\t\t\t{content} {/*content of the cell*/}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst baseStyle = {\r\n\tborder: 'outset 3px #6ee093',\r\n\twidth: 36,\r\n\theight: 36\r\n}\r\n\r\nconst openStyle = {\r\n\tborder: 'outset 1px #6ee093',\r\n\twidth: 40,\r\n\theight: 40\r\n}\r\n\r\nconst baseFlagStyle = {\r\n\tcolor: '#a11515',\r\n\tborder: 'outset 3px #6ee093',\r\n\twidth: 36,\r\n\theight: 36\r\n}\r\n\r\nconst falseFlagStyle = {\r\n\tcolor: '#1F1F1F',\r\n\tborder: 'dashed 1px #a11515',\r\n\twidth: 40,\r\n\theight: 40\r\n}","import React from 'react'\r\nimport Cell from './Cell'\r\n\r\n// step one, render a 10x10 board\r\n\r\n// component to render all the cells\r\n// state stored in a 2D array [[],[],[]] [x][y]\r\n\r\nexport default class Board extends React.Component {\r\n\trenderCells() {\r\n\t\tconst rows = []\r\n\t\tfor (var y=0; y<this.props.boardHeight;y++) {\r\n\t\t\tconst columns = []\r\n\t\t\tfor (var x=0; x<this.props.boardWidth;x++) {\r\n\t\t\t\tcolumns.push(\r\n\t\t\t\t\t<Cell\r\n\t\t\t\t\t\tkey={x + y*1000}\r\n\t\t\t\t\t\tbomb= {this.props.board[x][y].bomb}\r\n\t\t\t\t\t\tbombCount= {this.props.board[x][y].bombCount}\r\n\t\t\t\t\t\topen= {this.props.board[x][y].open}\r\n\t\t\t\t\t\tflagged= {this.props.board[x][y].flagged}\r\n\t\t\t\t\t\tx={x}\r\n\t\t\t\t\t\ty={y}\r\n\t\t\t\t\t\teventClick={this.props.eventClick}\r\n\t\t\t\t\t\teventRightClick={this.props.eventRightClick}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\trows.push(columns);\r\n\t\t}\r\n\t\treturn rows\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t{this.renderCells()}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\t\t// const rows = [];\r\n\t\t// for (var y=0; y<this.props.boardHeight;y++){\r\n\t\t// \tconst column = [];\r\n\t\t// \tfor(var x=0; x<this.props.boardWidth;x++){\r\n\t\t// \t\tcolumn.push(\r\n\t\t// \t\t\t<Cell \r\n\t\t// \t\t\t\tkey={x + y*100}\r\n\t\t// \t\t\t\tx={x}\r\n\t\t// \t\t\t\ty={y}\r\n\t\t// \t\t\t\teventClick={this.props.eventClick}\r\n\t\t// \t\t\t\teventRightClick={this.props.eventRightClick}\r\n\t\t// \t\t\t/>\r\n\t\t// \t\t)\r\n\t\t// \t}\r\n\t\t// \trows.push(column)\r\n\t\t// }\r\n\t\t// return rows\t{ bomb: false, bombCount: 0, open: false, flagged: false }))","const difficultyConfig = {\n\t'easy': {\n\t\tboardWidth: 8,\n\t\tboardHeight: 8,\n\t\tbombNum: 10\n\t},\n\t'hard': {\n\t\tboardWidth: 30,\n\t\tboardHeight: 16,\n\t\tbombNum: 99\n\t}\n}\n\nexport default difficultyConfig","import React from 'react';\r\nimport '../styles/Game.css';\r\nimport Board from './Board';\r\nimport difficultyConfig from '../difficultyConfig';\r\n\r\n// game logic component, using 'Board' to render\r\n\r\nclass Game extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.difficulty = this.props.difficulty; // bad practice\r\n\t\tthis.state = { \r\n\t\t\tboard: this._initBoard(this.difficulty),\r\n\t\t\tgameOver: false,\r\n\t\t\tvictory: false,\r\n\t\t\tflagCount: 0,\r\n\t\t\ttimerTime: 0,\r\n\t\t\ttimerOn: false,\r\n\t\t}\r\n\r\n\t\tthis.cellClicked = this.cellClicked.bind(this)\r\n\t\tthis.cellRightClicked = this.cellRightClicked.bind(this)\r\n\t\tthis.gameTimer = setInterval(() => {\r\n\t\t\tif (!this.state.gameOver && this.state.timerOn) {\r\n\t\t\t\tconst {timerTime} = this.state;\r\n\t\t\t\tthis.setState({ timerTime: timerTime + 1});\r\n\t\t\t}\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\t_initBoard(difficulty) {\r\n\t\tconst bombPlaces = this._initBombs(difficulty)\r\n\t\tconst {boardWidth, boardHeight} = difficultyConfig[difficulty]\r\n\t\tconst board = Array.from( Array(boardWidth), () => Array(boardHeight).fill(\r\n\t\t\t{ bomb: false, bombCount: 0, open: false, flagged: false }))\r\n\r\n\t\tconsole.log(bombPlaces)\r\n\t\tfor (let bomb of bombPlaces) {\r\n\t\t\tboard[bomb[0]][bomb[1]] = Object.assign({}, board[bomb[0]][bomb[1]], { bomb: true })\r\n\t\t}\r\n\t\treturn board\r\n\t}\r\n\r\n\t_initBombs(difficulty) {\r\n\t\tconst bombPlaces = []\r\n\t\tconst {boardWidth, boardHeight, bombNum} = difficultyConfig[difficulty]\r\n\t\twhile(bombPlaces.length < bombNum) {\r\n\t\t\tconst x = Math.floor(Math.random() * boardWidth)\r\n\t\t\tconst y = Math.floor(Math.random() * boardHeight)\r\n\r\n\t\t\tlet duplicate = false;\r\n\t\t\tif (bombPlaces.length === 0) {\r\n\t\t\t\tbombPlaces.push([x,y])\r\n\t\t\t} else {\r\n\t\t        for (let bomb of bombPlaces) {\r\n\t\t        \tif (bomb[0] === x && bomb[1] === y) {\r\n\t\t        \t\tduplicate = true;\r\n\t\t        \t\tbreak;\r\n\t\t        \t}\r\n\t\t        }\r\n\t\t        if (!duplicate) {\r\n\t\t        \tbombPlaces.push([x,y])\r\n\t\t        }\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bombPlaces\r\n\t}\r\n\r\n\tchgDifficulty(e) {\r\n\t\tthis.difficulty = e.target.textContent.toLowerCase() // pretty sure this is bad practice -- mutation\r\n\t\tthis.setState({ board: this._initBoard(this.difficulty), \r\n\t\t\t\t\t\tgameOver: false,\r\n\t\t\t\t\t\tvictory: false,\r\n\t\t\t\t\t\ttimerTime: 0,\r\n\t\t\t\t\t\ttimerOn: false,\r\n\t\t\t\t\t\tflagCount: 0 })\r\n\t}\r\n\r\n\trevealBombs(boardWidth,boardHeight, board) {\r\n\t\tfor (var y=0; y<boardHeight;y++) {\r\n\t\t\tfor (var x=0; x<boardWidth;x++) {\r\n\t\t\t\tif (board[x][y].bomb && !board[x][y].flagged) { // open unflagged bombs\r\n\t\t\t\t\tboard[x][y] = Object.assign({}, board[x][y], { open: true })\r\n\t\t\t\t}\r\n\t\t\t\tif (board[x][y].flagged && !board[x][y].bomb) { // empty cells that were flagged\r\n\t\t\t\t\tboard[x][y] = Object.assign({}, board[x][y], { open: true })\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn board\r\n\t}\r\n\r\n\tcellClicked(x, y) {\r\n\t\tthis.setState({ timerOn: true })\r\n\t\tif (this.state.gameOver) { // check if game is already over\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.openCell(x, y)\r\n\t}\r\n\r\n\tcellRightClicked(x, y) {\r\n\t\tif (this.state.gameOver) { // check if game is already over\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.toggleFlag(x, y)\r\n\t}\r\n\r\n\topenCell(x, y) {\r\n\r\n\t\tlet board = [].concat(this.state.board)\r\n\t\tconst { boardWidth, boardHeight } = difficultyConfig[this.difficulty]\r\n\r\n\t\tif (!board[x][y].open && !board[x][y].flagged) { // not opened and unflagged\r\n\r\n\t\t\tif (board[x][y].bomb) { // bomb pressed\r\n\t\t\t\tthis.setState({ gameOver: true }); // not the best way of doing things but idk how to do otherwise\r\n\t\t\t\tboard = this.revealBombs(boardWidth,boardHeight,board)\r\n\t\t\t}\r\n\r\n\t\t\tlet bombCount = 0 // check neighbours for number of bombs\r\n\t\t\tfor(var i= x-1;i <= x+1; i++) {\r\n\t\t\t\tfor(var j= y-1;j <= y+1; j++) {\r\n\t\t\t\t\tif ((i < 0 || i >= boardWidth) || \r\n\t\t\t\t\t\t(j < 0 || j >= boardHeight) || \r\n\t\t\t\t\t\t(i === x && j === y)) { // make sure the neighbour is not out of bounds\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (board[i][j].bomb) {\r\n\t\t\t\t\t\tbombCount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tboard[x][y] = Object.assign({}, board[x][y], {open: true, bombCount: bombCount})\r\n\t\t\tthis.setState({board}) // update board\r\n\r\n\t\t\tif (this._isClear(board)) { // victory!\r\n\t\t\t\tthis.setState({ gameOver: true, victory: true});\r\n\t\t\t}\r\n\r\n\t\t\tif (bombCount === 0 && !board[x][y].bomb) { // floodfill function if it is a '0' cell\r\n\t\t\t\tfor (i= x-1; i <= x+1; i++) {\r\n\t\t\t\t\tfor(j= y-1;j <= y+1; j++) {\r\n\t\t\t\t\t\tif ((i < 0 || i >= boardWidth) || \r\n\t\t\t\t\t\t\t(j < 0 || j >= boardHeight) || \r\n\t\t\t\t\t\t\t(i === x && j === y)) { \r\n\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.openCell(i, j) //recursive call for floodfill function\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\ttoggleFlag(x, y) {\r\n\t\tconst board = [].concat(this.state.board)\r\n\t\tif (board[x][y].open) { // don't flag if its an open tile\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {flagged} = board[x][y]\r\n\t\tboard[x][y] = Object.assign({}, board[x][y], {flagged: !flagged})\r\n\r\n\t\tlet flagCount = this.state.flagCount\r\n\t\tboard[x][y].flagged ? flagCount++ : flagCount--\r\n\r\n\t\tthis.setState({flagCount: flagCount})\r\n\t}\r\n\r\n\t_isClear(board){\r\n\t\tlet count = 0\r\n\t\tconst {boardWidth, boardHeight, bombNum} = difficultyConfig[this.difficulty]\r\n\t\tfor (var y=0; y<boardHeight;y++) {\r\n\t\t\tfor (var x=0; x<boardWidth;x++) {\r\n\t\t\t\tif (board[x][y].open) {\r\n\t\t\t\t\tcount += 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (count === boardWidth * boardHeight - bombNum);\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {boardWidth, boardHeight, bombNum} = difficultyConfig[this.difficulty]\r\n\t\tconst _boardWidth = 42 * boardWidth // the width of the entire thing\r\n\r\n\t\tconst bombsRemaining = bombNum - this.state.flagCount\r\n\r\n\t\tlet seconds = (\"0\" + (Math.floor(this.state.timerTime) % 60)).slice(-2);\r\n\t\tlet minutes = (\"0\" + (Math.floor(this.state.timerTime / 60) % 60)).slice(-2);\r\n\r\n\t\tlet gameEndText = \"\"\r\n\t\tif (this.state.victory === true){\r\n\t\t\tgameEndText = <p>Victory!</p>\r\n\t\t} else if (this.state.gameOver === true){\r\n\t\t\tgameEndText = <p>You lost :(</p>\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div id=\"main\" style={{ width: _boardWidth}}>\r\n\t\t\t\t<section id=\"header\">\r\n\t\t\t\t\t<h1> Minesweeper </h1>\r\n\t\t\t\t\t<p>New / Reset Game</p>\r\n\t\t\t\t\t<button className=\"easyButton\" onClick={(e) => this.chgDifficulty(e)}>Easy</button>\r\n\t\t\t\t\t<button className=\"hardButton\" onClick={(e) => this.chgDifficulty(e)}>Hard</button>\r\n\t\t\t\t</section>\r\n\t\t\t\t<section id=\"board\">\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\tboard={this.state.board}\r\n\t\t\t\t\t\tboardWidth={boardWidth}\r\n\t\t\t\t\t\tboardHeight={boardHeight}\r\n\t\t\t\t\t\teventClick={this.cellClicked}\r\n\t\t\t\t\t\teventRightClick= {this.cellRightClicked}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</section>\r\n\t\t\t\t<section id=\"footer\">\r\n\t\t\t\t\t<div> {bombsRemaining}  <i className=\"fa fa-bomb\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{gameEndText}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{minutes}:{seconds}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nexport default Game\r\n\r\n/* bad practices count : 2x\r\n*/","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport Game from './components/Game'\n\nReactDOM.render(<Game difficulty='easy'/>, document.getElementById('root'));"],"sourceRoot":""}